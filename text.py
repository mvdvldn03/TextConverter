print("********* ASCII Text Converter (Space As Delimiter) *********\n")
question = str(input("  Binary to ASCII Text (1)             ASCII Text to Binary (2)\nHexidecimal to ASCII Text (3)       ASCII Text to Hexidecimal (4)"))

def code_text_translator(inp,code,symbol):
  if code in inp:
    inp = inp.replace(code,symbol)
    return inp
  else:
    return inp
def text_code_translator(inp,code,symbol):
  if symbol in inp:
    inp = inp.replace(symbol,code)
    return inp
  else:
    return inp

if question == "1":
  binary = input("\nBinary Input:\n")
  binary = code_text_translator(binary,"01111110","~")
  binary = code_text_translator(binary,"01111101","}")
  binary = code_text_translator(binary,"01111100","|")
  binary = code_text_translator(binary,"01111011","{")
  binary = code_text_translator(binary,"01111010","z")
  binary = code_text_translator(binary,"01111001","y")
  binary = code_text_translator(binary,"01111000","x")
  binary = code_text_translator(binary,"01110111","w")
  binary = code_text_translator(binary,"01110110","v")
  binary = code_text_translator(binary,"01110101","u")
  binary = code_text_translator(binary,"01110100","t")
  binary = code_text_translator(binary,"01110011","s")
  binary = code_text_translator(binary,"01110010","r")
  binary = code_text_translator(binary,"01110001","q")
  binary = code_text_translator(binary,"01110000","p")
  binary = code_text_translator(binary,"01101111","o")
  binary = code_text_translator(binary,"01101110","n")
  binary = code_text_translator(binary,"01101101","m")
  binary = code_text_translator(binary,"01101100","l")
  binary = code_text_translator(binary,"01101011","k")
  binary = code_text_translator(binary,"01101010","j")
  binary = code_text_translator(binary,"01101001","i")
  binary = code_text_translator(binary,"01101000","h")
  binary = code_text_translator(binary,"01100111","g")
  binary = code_text_translator(binary,"01100110","f")
  binary = code_text_translator(binary,"01100101","e")
  binary = code_text_translator(binary,"01100100","d")
  binary = code_text_translator(binary,"01100011","c")
  binary = code_text_translator(binary,"01100010","b")
  binary = code_text_translator(binary,"01100001","a")
  binary = code_text_translator(binary,"01100000","`")
  binary = code_text_translator(binary,"01011111","_")
  binary = code_text_translator(binary,"01011110","^")
  binary = code_text_translator(binary,"01011101","]")
  binary = code_text_translator(binary,"01011100"," \ ") 
  binary = code_text_translator(binary,"01011011","[")
  binary = code_text_translator(binary,"01011010","Z")
  binary = code_text_translator(binary,"01011001","Y")
  binary = code_text_translator(binary,"01011000","X")
  binary = code_text_translator(binary,"01010111","W")
  binary = code_text_translator(binary,"01010110","V")
  binary = code_text_translator(binary,"01010101","U")
  binary = code_text_translator(binary,"01010100","T")
  binary = code_text_translator(binary,"01010011","S")
  binary = code_text_translator(binary,"01010010","R")
  binary = code_text_translator(binary,"01010001","Q")
  binary = code_text_translator(binary,"01010000","P")
  binary = code_text_translator(binary,"01001111","O")
  binary = code_text_translator(binary,"01001110","N")
  binary = code_text_translator(binary,"01001101","M")
  binary = code_text_translator(binary,"01001100","L")
  binary = code_text_translator(binary,"01001011","K")
  binary = code_text_translator(binary,"01001010","J")
  binary = code_text_translator(binary,"01001001","I")
  binary = code_text_translator(binary,"01001000","H")
  binary = code_text_translator(binary,"01000111","G")
  binary = code_text_translator(binary,"01000110","F")
  binary = code_text_translator(binary,"01000101","E")
  binary = code_text_translator(binary,"01000101","E")
  binary = code_text_translator(binary,"01000100","D")
  binary = code_text_translator(binary,"01000011","C")
  binary = code_text_translator(binary,"01000010","B")
  binary = code_text_translator(binary,"01000001","A")
  binary = code_text_translator(binary,"01000000","@")
  binary = code_text_translator(binary,"00111111","?")
  binary = code_text_translator(binary,"00111110",">")
  binary = code_text_translator(binary,"00111101","=")
  binary = code_text_translator(binary,"00111100","<")
  binary = code_text_translator(binary,"00111011",";")
  binary = code_text_translator(binary,"00111010",":")
  binary = code_text_translator(binary,"00111001","9")
  binary = code_text_translator(binary,"00111000","8")
  binary = code_text_translator(binary,"00110111","7")
  binary = code_text_translator(binary,"00110110","6")
  binary = code_text_translator(binary,"00110101","5")
  binary = code_text_translator(binary,"00110100","4")
  binary = code_text_translator(binary,"00110011","3")
  binary = code_text_translator(binary,"00110010","2")
  binary = code_text_translator(binary,"00110001","1")
  binary = code_text_translator(binary,"00110000","0")
  binary = code_text_translator(binary,"00101111","/")
  binary = code_text_translator(binary,"00101110",".")
  binary = code_text_translator(binary,"00101101","-")
  binary = code_text_translator(binary,"00101100",",")
  binary = code_text_translator(binary,"00101011","+")
  binary = code_text_translator(binary,"00101010","*")
  binary = code_text_translator(binary,"00101001",")")
  binary = code_text_translator(binary,"00101000","(")
  binary = code_text_translator(binary,"10000000011001","'")
  binary = code_text_translator(binary,"00100111","'")
  binary = code_text_translator(binary,"00100110","&") 
  binary = code_text_translator(binary,"00100101","%")
  binary = code_text_translator(binary,"00100100","$")
  binary = code_text_translator(binary,"00100011","#")
  binary = code_text_translator(binary,"10000000011100",'"') 
  binary = code_text_translator(binary,"10000000011101",'"') 
  binary = code_text_translator(binary,"00100001","!")
  binary = code_text_translator(binary,"10000000010100","â€”")
  binary = code_text_translator(binary,"0001010","\n\t")
  binary = code_text_translator(binary,"100000&","...")
  if " " in binary:
    binary = binary.replace(" ","")
  binary = code_text_translator(binary,"00100000"," ")
  print("\nOutput:\n" + binary)
if question == "2":
  text = input("\nASCII Input (Regular Text):\n")
  text = text.split()
  text_1 = []
  text_2 = []
  for term in text:
    term = text_code_translator(term,"00111001","9")
    term = text_code_translator(term,"00111000","8")
    term = text_code_translator(term,"00110111","7")
    term = text_code_translator(term,"00110110","6")
    term = text_code_translator(term,"00110101","5")
    term = text_code_translator(term,"00110100","4")
    term = text_code_translator(term,"00110011","3")
    term = text_code_translator(term,"00110010","2")
    term = text_code_translator(term,"00110001","1")
    term = text_code_translator(term,"00110000","0")
    term = text_code_translator(term,"01111110","~")
    term = text_code_translator(term,"01111101","}")
    term = text_code_translator(term,"01111100","|")
    term = text_code_translator(term,"01111011","{")
    term = text_code_translator(term,"01111010","z")
    term = text_code_translator(term,"01111001","y")
    term = text_code_translator(term,"01111000","x")
    term = text_code_translator(term,"01110111","w")
    term = text_code_translator(term,"01110110","v")
    term = text_code_translator(term,"01110101","u")
    term = text_code_translator(term,"01110100","t")
    term = text_code_translator(term,"01110011","s")
    term = text_code_translator(term,"01110010","r")
    term = text_code_translator(term,"01110001","q")
    term = text_code_translator(term,"01110000","p")
    term = text_code_translator(term,"01101111","o")
    term = text_code_translator(term,"01101110","n")
    term = text_code_translator(term,"01101101","m")
    term = text_code_translator(term,"01101100","l")
    term = text_code_translator(term,"01101011","k")
    term = text_code_translator(term,"01101010","j")
    term = text_code_translator(term,"01101001","i")
    term = text_code_translator(term,"01101000","h")
    term = text_code_translator(term,"01100111","g")
    term = text_code_translator(term,"01100110","f")
    term = text_code_translator(term,"01100101","e")
    term = text_code_translator(term,"01100100","d")
    term = text_code_translator(term,"01100011","c")
    term = text_code_translator(term,"01100010","b")
    term = text_code_translator(term,"01100001","a")
    term = text_code_translator(term,"01100000","`")
    term = text_code_translator(term,"01011111","_")
    term = text_code_translator(term,"01011110","^")
    term = text_code_translator(term,"01011101","]")
    term = text_code_translator(term,"01011100"," \ ") 
    term = text_code_translator(term,"01011011","[")
    term = text_code_translator(term,"01011010","Z")
    term = text_code_translator(term,"01011001","Y")
    term = text_code_translator(term,"01011000","X")
    term = text_code_translator(term,"01010111","W")
    term = text_code_translator(term,"01010110","V")
    term = text_code_translator(term,"01010101","U")
    term = text_code_translator(term,"01010100","T")
    term = text_code_translator(term,"01010011","S")
    term = text_code_translator(term,"01010010","R")
    term = text_code_translator(term,"01010001","Q")
    term = text_code_translator(term,"01010000","P")
    term = text_code_translator(term,"01001111","O")
    term = text_code_translator(term,"01001110","N")
    term = text_code_translator(term,"01001101","M")
    term = text_code_translator(term,"01001100","L")
    term = text_code_translator(term,"01001011","K")
    term = text_code_translator(term,"01001010","J")
    term = text_code_translator(term,"01001001","I")
    term = text_code_translator(term,"01001000","H")
    term = text_code_translator(term,"01000111","G")
    term = text_code_translator(term,"01000110","F")
    term = text_code_translator(term,"01000101","E")
    term = text_code_translator(term,"01000101","E")
    term = text_code_translator(term,"01000100","D")
    term = text_code_translator(term,"01000011","C")
    term = text_code_translator(term,"01000010","B")
    term = text_code_translator(term,"01000001","A")
    term = text_code_translator(term,"01000000","@")
    term = text_code_translator(term,"00111111","?")
    term = text_code_translator(term,"00111110",">")
    term = text_code_translator(term,"00111101","=")
    term = text_code_translator(term,"00111100","<")
    term = text_code_translator(term,"00111011",";")
    term = text_code_translator(term,"00111010",":")
    term = text_code_translator(term,"00101111","/")
    term = text_code_translator(term,"00101110",".")
    term = text_code_translator(term,"00101101","-")
    term = text_code_translator(term,"00101100",",")
    term = text_code_translator(term,"00101011","+")
    term = text_code_translator(term,"00101010","*")
    term = text_code_translator(term,"00101001",")")
    term = text_code_translator(term,"00101000","(")
    term = text_code_translator(term,"00100111","'")
    term = text_code_translator(term,"00100110","&") 
    term = text_code_translator(term,"00100101","%")
    term = text_code_translator(term,"00100100","$")
    term = text_code_translator(term,"00100011","#")
    term = text_code_translator(term,"00100001","!")
    text_1.append([term[i:i+8] for i in range(0, len(term), 8)])
    #term = text_code_translator(term,"10000000011100",'"') 
    #term = text_code_translator(term,"10000000011101",'"') 
    #term = text_code_translator(term,"10000000010100","â€”")
    #term = text_code_translator(term,"10000000011001","'")
    #term = text_code_translator(term,"0001010","\n\t")
    #term = text_code_translator(term,"100000&","...")
  for word in text_1:
      word = " ".join(word)
      text_2.append(word)
  text_3 = " 00100000 ".join(text_2)
  print("\nOutput:\n" + text_3)
if question == "3":
  hexidecimal = input("\nHexidecimal Input:\n")
  hexidecimal = hexidecimal.upper()
  hexidecimal = code_text_translator(hexidecimal,"7E","~")
  hexidecimal = code_text_translator(hexidecimal,"7D","}")
  hexidecimal = code_text_translator(hexidecimal,"7C","|")
  hexidecimal = code_text_translator(hexidecimal,"7B","{")
  hexidecimal = code_text_translator(hexidecimal,"7A","z")
  hexidecimal = code_text_translator(hexidecimal,"79","y")
  hexidecimal = code_text_translator(hexidecimal,"78","x")
  hexidecimal = code_text_translator(hexidecimal,"77","w")
  hexidecimal = code_text_translator(hexidecimal,"76","v")
  hexidecimal = code_text_translator(hexidecimal,"75","u")
  hexidecimal = code_text_translator(hexidecimal,"74","t")
  hexidecimal = code_text_translator(hexidecimal,"73","s")
  hexidecimal = code_text_translator(hexidecimal,"72","r")
  hexidecimal = code_text_translator(hexidecimal,"71","q")
  hexidecimal = code_text_translator(hexidecimal,"70","p")
  hexidecimal = code_text_translator(hexidecimal,"6F","o")
  hexidecimal = code_text_translator(hexidecimal,"6E","n")
  hexidecimal = code_text_translator(hexidecimal,"6D","m")
  hexidecimal = code_text_translator(hexidecimal,"6C","l")
  hexidecimal = code_text_translator(hexidecimal,"6B","k")
  hexidecimal = code_text_translator(hexidecimal,"6A","j")
  hexidecimal = code_text_translator(hexidecimal,"69","i")
  hexidecimal = code_text_translator(hexidecimal,"68","h")
  hexidecimal = code_text_translator(hexidecimal,"67","g")
  hexidecimal = code_text_translator(hexidecimal,"66","f")
  hexidecimal = code_text_translator(hexidecimal,"65","e")
  hexidecimal = code_text_translator(hexidecimal,"64","d")
  hexidecimal = code_text_translator(hexidecimal,"63","c")
  hexidecimal = code_text_translator(hexidecimal,"62","b")
  hexidecimal = code_text_translator(hexidecimal,"61","a")
  hexidecimal = code_text_translator(hexidecimal,"60","`")
  hexidecimal = code_text_translator(hexidecimal,"5F","_")
  hexidecimal = code_text_translator(hexidecimal,"5E","^")
  hexidecimal = code_text_translator(hexidecimal,"5D","]")
  hexidecimal = code_text_translator(hexidecimal,"5C"," \ ") 
  hexidecimal = code_text_translator(hexidecimal,"5B","[")
  hexidecimal = code_text_translator(hexidecimal,"5A","Z")
  hexidecimal = code_text_translator(hexidecimal,"59","Y")
  hexidecimal = code_text_translator(hexidecimal,"58","X")
  hexidecimal = code_text_translator(hexidecimal,"57","W")
  hexidecimal = code_text_translator(hexidecimal,"56","V")
  hexidecimal = code_text_translator(hexidecimal,"55","U")
  hexidecimal = code_text_translator(hexidecimal,"54","T")
  hexidecimal = code_text_translator(hexidecimal,"53","S")
  hexidecimal = code_text_translator(hexidecimal,"52","R")
  hexidecimal = code_text_translator(hexidecimal,"51","Q")
  hexidecimal = code_text_translator(hexidecimal,"50","P")
  hexidecimal = code_text_translator(hexidecimal,"4F","O")
  hexidecimal = code_text_translator(hexidecimal,"4E","N")
  hexidecimal = code_text_translator(hexidecimal,"4D","M")
  hexidecimal = code_text_translator(hexidecimal,"4C","L")
  hexidecimal = code_text_translator(hexidecimal,"4B","K")
  hexidecimal = code_text_translator(hexidecimal,"4A","J")
  hexidecimal = code_text_translator(hexidecimal,"49","I")
  hexidecimal = code_text_translator(hexidecimal,"48","H")
  hexidecimal = code_text_translator(hexidecimal,"47","G")
  hexidecimal = code_text_translator(hexidecimal,"46","F")
  hexidecimal = code_text_translator(hexidecimal,"45","E")
  hexidecimal = code_text_translator(hexidecimal,"44","D")
  hexidecimal = code_text_translator(hexidecimal,"43","C")
  hexidecimal = code_text_translator(hexidecimal,"42","B")
  hexidecimal = code_text_translator(hexidecimal,"41","A")
  hexidecimal = code_text_translator(hexidecimal,"40","@")
  hexidecimal = code_text_translator(hexidecimal,"3F","?")
  hexidecimal = code_text_translator(hexidecimal,"3E",">")
  hexidecimal = code_text_translator(hexidecimal,"3D","=")
  hexidecimal = code_text_translator(hexidecimal,"3C","<")
  hexidecimal = code_text_translator(hexidecimal,"3B",";")
  hexidecimal = code_text_translator(hexidecimal,"3A",":")
  hexidecimal = code_text_translator(hexidecimal,"39","9")
  hexidecimal = code_text_translator(hexidecimal,"38","8")
  hexidecimal = code_text_translator(hexidecimal,"37","7")
  hexidecimal = code_text_translator(hexidecimal,"36","6")
  hexidecimal = code_text_translator(hexidecimal,"35","5")
  hexidecimal = code_text_translator(hexidecimal,"34","4")
  hexidecimal = code_text_translator(hexidecimal,"33","3")
  hexidecimal = code_text_translator(hexidecimal,"32","2")
  hexidecimal = code_text_translator(hexidecimal,"31","1")
  hexidecimal = code_text_translator(hexidecimal,"30","0")
  hexidecimal = code_text_translator(hexidecimal,"2F","/")
  hexidecimal = code_text_translator(hexidecimal,"2E",".")
  hexidecimal = code_text_translator(hexidecimal,"2D","-")
  hexidecimal = code_text_translator(hexidecimal,"2C",",")
  hexidecimal = code_text_translator(hexidecimal,"2B","+")
  hexidecimal = code_text_translator(hexidecimal,"2A","*")
  hexidecimal = code_text_translator(hexidecimal,"29",")")
  hexidecimal = code_text_translator(hexidecimal,"28","(")
  hexidecimal = code_text_translator(hexidecimal,"27","'")
  hexidecimal = code_text_translator(hexidecimal,"26","&") 
  hexidecimal = code_text_translator(hexidecimal,"25","%")
  hexidecimal = code_text_translator(hexidecimal,"24","$")
  hexidecimal = code_text_translator(hexidecimal,"23","#")
  hexidecimal = code_text_translator(hexidecimal,"1C",'"') 
  hexidecimal = code_text_translator(hexidecimal,"1D",'"') 
  hexidecimal = code_text_translator(hexidecimal,"21","!")
  hexidecimal = code_text_translator(hexidecimal,"14","â€”")
  hexidecimal = code_text_translator(hexidecimal,"0A","\n\t")
  hexidecimal = code_text_translator(hexidecimal," &","...")
  hexidecimal = code_text_translator(hexidecimal,"19","'")
  if " " in hexidecimal:
    hexidecimal = hexidecimal.replace(" ","")
  hexidecimal = code_text_translator(hexidecimal,"20"," ")
  hexidecimal = code_text_translator(hexidecimal," '","'")
  hexidecimal = code_text_translator(hexidecimal,' "','"')
  print("\nOutput:\n" + hexidecimal)
if question == "4":
  text = input("\nASCII Input (Regular Text):\n")
  text = text.split()
  text_1 = []
  text_2 = []
  for term in text:
    term = text_code_translator(term,"39","9")
    term = text_code_translator(term,"38","8")
    term = text_code_translator(term,"37","7")
    term = text_code_translator(term,"36","6")
    term = text_code_translator(term,"35","5")
    term = text_code_translator(term,"34","4")
    term = text_code_translator(term,"33","3")
    term = text_code_translator(term,"32","2")
    term = text_code_translator(term,"31","1")
    term = text_code_translator(term,"30","0")
    term = text_code_translator(term,"46","F")
    term = text_code_translator(term,"45","E")
    term = text_code_translator(term,"44","D")
    term = text_code_translator(term,"43","C")
    term = text_code_translator(term,"42","B")
    term = text_code_translator(term,"41","A")
    term = text_code_translator(term,"7E","~")
    term = text_code_translator(term,"7D","}")
    term = text_code_translator(term,"7C","|")
    term = text_code_translator(term,"7B","{")
    term = text_code_translator(term,"7A","z")
    term = text_code_translator(term,"79","y")
    term = text_code_translator(term,"78","x")
    term = text_code_translator(term,"77","w")
    term = text_code_translator(term,"76","v")
    term = text_code_translator(term,"75","u")
    term = text_code_translator(term,"74","t")
    term = text_code_translator(term,"73","s")
    term = text_code_translator(term,"72","r")
    term = text_code_translator(term,"71","q")
    term = text_code_translator(term,"70","p")
    term = text_code_translator(term,"6F","o")
    term = text_code_translator(term,"6E","n")
    term = text_code_translator(term,"6D","m")
    term = text_code_translator(term,"6C","l")
    term = text_code_translator(term,"6B","k")
    term = text_code_translator(term,"6A","j")
    term = text_code_translator(term,"69","i")
    term = text_code_translator(term,"68","h")
    term = text_code_translator(term,"67","g")
    term = text_code_translator(term,"66","f")
    term = text_code_translator(term,"65","e")
    term = text_code_translator(term,"64","d")
    term = text_code_translator(term,"63","c")
    term = text_code_translator(term,"62","b")
    term = text_code_translator(term,"61","a")
    term = text_code_translator(term,"60","`")
    term = text_code_translator(term,"5F","_")
    term = text_code_translator(term,"5E","^")
    term = text_code_translator(term,"5D","]")
    term = text_code_translator(term,"5C"," \ ") 
    term = text_code_translator(term,"5B","[")
    term = text_code_translator(term,"5A","Z")
    term = text_code_translator(term,"59","Y")
    term = text_code_translator(term,"58","X")
    term = text_code_translator(term,"57","W")
    term = text_code_translator(term,"56","V")
    term = text_code_translator(term,"55","U")
    term = text_code_translator(term,"54","T")
    term = text_code_translator(term,"53","S")
    term = text_code_translator(term,"52","R")
    term = text_code_translator(term,"51","Q")
    term = text_code_translator(term,"50","P")
    term = text_code_translator(term,"4F","O")
    term = text_code_translator(term,"4E","N")
    term = text_code_translator(term,"4D","M")
    term = text_code_translator(term,"4C","L")
    term = text_code_translator(term,"4B","K")
    term = text_code_translator(term,"4A","J")
    term = text_code_translator(term,"49","I")
    term = text_code_translator(term,"48","H")
    term = text_code_translator(term,"47","G")
    term = text_code_translator(term,"40","@")
    term = text_code_translator(term,"3F","?")
    term = text_code_translator(term,"3E",">")
    term = text_code_translator(term,"3D","=")
    term = text_code_translator(term,"3C","<")
    term = text_code_translator(term,"3B",";")
    term = text_code_translator(term,"3A",":")
    term = text_code_translator(term,"2F","/")
    term = text_code_translator(term,"2E",".")
    term = text_code_translator(term,"2D","-")
    term = text_code_translator(term,"2C",",")
    term = text_code_translator(term,"2B","+")
    term = text_code_translator(term,"2A","*")
    term = text_code_translator(term,"29",")")
    term = text_code_translator(term,"28","(")
    term = text_code_translator(term,"27","'")
    term = text_code_translator(term,"26","&") 
    term = text_code_translator(term,"25","%")
    term = text_code_translator(term,"24","$")
    term = text_code_translator(term,"23","#")
    term = text_code_translator(term,"1C",'"') 
    term = text_code_translator(term,"1D",'"') 
    term = text_code_translator(term,"21","!")
    term = text_code_translator(term,"14","â€”")
    term = text_code_translator(term,"0A","\n\t")
    term = text_code_translator(term," &","...")
    term = text_code_translator(term,"19","'")
    #ellipsis, qms, apostrophes, Cuts off term after 0A???
    text_1.append([term[i:i+2] for i in range(0, len(term), 2)])
  for word in text_1:
      word = " ".join(word)
      text_2.append(word)
  text_3 = " 20 ".join(text_2)
  print("\nOutput:\n" + text_3)
